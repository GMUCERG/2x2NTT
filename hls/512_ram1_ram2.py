#!/usr/bin/evn python3
from gmpy2 import powmod as pow 

n = 512
q = 12289
g = 10968
mont = 2**18
n_inv = 12265

ntr = list(range(n))
brv = [0, 256, 128, 384, 64, 320, 192, 448, 32, 288, 160, 416, 96, 352, 224, 480,
    16, 272, 144, 400, 80, 336, 208, 464, 48, 304, 176, 432, 112, 368, 240,
    496, 8, 264, 136, 392, 72, 328, 200, 456, 40, 296, 168, 424, 104, 360, 232,
    488, 24, 280, 152, 408, 88, 344, 216, 472, 56, 312, 184, 440, 120, 376,
    248, 504, 4, 260, 132, 388, 68, 324, 196, 452, 36, 292, 164, 420, 100, 356,
    228, 484, 20, 276, 148, 404, 84, 340, 212, 468, 52, 308, 180, 436, 116,
    372, 244, 500, 12, 268, 140, 396, 76, 332, 204, 460, 44, 300, 172, 428,
    108, 364, 236, 492, 28, 284, 156, 412, 92, 348, 220, 476, 60, 316, 188,
    444, 124, 380, 252, 508, 2, 258, 130, 386, 66, 322, 194, 450, 34, 290, 162,
    418, 98, 354, 226, 482, 18, 274, 146, 402, 82, 338, 210, 466, 50, 306, 178,
    434, 114, 370, 242, 498, 10, 266, 138, 394, 74, 330, 202, 458, 42, 298,
    170, 426, 106, 362, 234, 490, 26, 282, 154, 410, 90, 346, 218, 474, 58,
    314, 186, 442, 122, 378, 250, 506, 6, 262, 134, 390, 70, 326, 198, 454, 38,
    294, 166, 422, 102, 358, 230, 486, 22, 278, 150, 406, 86, 342, 214, 470,
    54, 310, 182, 438, 118, 374, 246, 502, 14, 270, 142, 398, 78, 334, 206,
    462, 46, 302, 174, 430, 110, 366, 238, 494, 30, 286, 158, 414, 94, 350,
    222, 478, 62, 318, 190, 446, 126, 382, 254, 510, 1, 257, 129, 385, 65, 321,
    193, 449, 33, 289, 161, 417, 97, 353, 225, 481, 17, 273, 145, 401, 81, 337,
    209, 465, 49, 305, 177, 433, 113, 369, 241, 497, 9, 265, 137, 393, 73, 329,
    201, 457, 41, 297, 169, 425, 105, 361, 233, 489, 25, 281, 153, 409, 89,
    345, 217, 473, 57, 313, 185, 441, 121, 377, 249, 505, 5, 261, 133, 389, 69,
    325, 197, 453, 37, 293, 165, 421, 101, 357, 229, 485, 21, 277, 149, 405,
    85, 341, 213, 469, 53, 309, 181, 437, 117, 373, 245, 501, 13, 269, 141,
    397, 77, 333, 205, 461, 45, 301, 173, 429, 109, 365, 237, 493, 29, 285,
    157, 413, 93, 349, 221, 477, 61, 317, 189, 445, 125, 381, 253, 509, 3, 259,
    131, 387, 67, 323, 195, 451, 35, 291, 163, 419, 99, 355, 227, 483, 19, 275,
    147, 403, 83, 339, 211, 467, 51, 307, 179, 435, 115, 371, 243, 499, 11,
    267, 139, 395, 75, 331, 203, 459, 43, 299, 171, 427, 107, 363, 235, 491,
    27, 283, 155, 411, 91, 347, 219, 475, 59, 315, 187, 443, 123, 379, 251,
    507, 7, 263, 135, 391, 71, 327, 199, 455, 39, 295, 167, 423, 103, 359, 231,
    487, 23, 279, 151, 407, 87, 343, 215, 471, 55, 311, 183, 439, 119, 375,
    247, 503, 15, 271, 143, 399, 79, 335, 207, 463, 47, 303, 175, 431, 111,
    367, 239, 495, 31, 287, 159, 415, 95, 351, 223, 479, 63, 319, 191, 447,
    127, 383, 255, 511]

newhope_gammas_inv_montgomery = [
    512,3944,4267,5411,9615,5900,3205,6063,9261,2021,3087,4770,1029,1590,343,530,
    8307,4273,2769,9617,923,7302,4404,2434,1468,9004,8682,11194,2894,11924,5061,8071,
    1687,10883,8755,7724,11111,6671,7800,6320,2600,6203,4963,6164,9847,6151,11475,10243,
    3825,11607,1275,3869,425,5386,4238,9988,5509,11522,10029,7937,3343,6742,9307,10440,
    11295,3480,3765,1160,1255,4483,8611,9687,11063,3229,7784,9269,6691,7186,10423,10588,
    11667,11722,3889,12100,9489,12226,3163,12268,9247,12282,11275,4094,11951,5461,8080,10013,
    10886,7434,7725,2478,2575,826,9051,8468,3017,6919,5102,10499,5797,7596,10125,2532,
    3375,844,1125,8474,375,6921,125,2307,4138,769,9572,8449,7287,11009,2429,7766,
    4906,6685,9828,10421,3276,7570,1092,10716,364,3572,8314,5287,10964,9955,7751,11511,
    6680,3837,6323,1279,6204,8619,2068,2873,8882,5054,7057,5781,10545,1927,3515,8835,
    5268,2945,1756,5078,8778,5789,2926,6026,9168,6105,3056,2035,5115,8871,1705,2957,
    8761,5082,11113,1694,11897,4661,8062,5650,10880,10076,7723,7455,10767,2485,3589,9021,
    9389,3007,7226,9195,6505,3065,10361,5118,7550,1706,6613,4665,10397,1555,7562,8711,
    6617,7000,6302,10526,6197,7605,6162,2535,2054,845,4781,4378,5690,9652,5993,11410,
    6094,11996,10224,8095,3408,10891,1136,11823,4475,3941,5588,5410,5959,9996,10179,3332,
    3393,5207,1131,5832,377,1944,4222,648,9600,216,3200,72,5163,24,1721,8,
    4670,4099,5653,9559,10077,11379,3359,3793,5216,9457,5835,11345,1945,7878,8841,2626,
    2947,9068,9175,7119,11251,2373,11943,791,3981,4360,1327,9646,8635,11408,11071,7899,
    11883,2633,3961,4974,9513,1658,3171,4649,1057,5646,8545,1882,11041,8820,11873,2940,
    8054,980,6781,4423,10453,9667,11677,11415,12085,3805,12221,9461,8170,7250,10916,6513,
    7735,2171,10771,4820,11783,5703,8024,1901,6771,4730,2257,5673,8945,1891,7078,8823,
    10552,2941,11710,9173,12096,7154,4032,6481,1344,10353,448,3451,8342,9343,6877,11307,
    10485,3769,3495,9449,1165,7246,8581,10608,11053,3536,11877,5275,3959,9951,5416,3317,
    9998,5202,7429,1734,10669,578,11749,4289,12109,5526,12229,1842,12269,614,8186,4301,
    6825,5530,2275,10036,8951,11538,7080,3846,2360,1282,4883,8620,5724,11066,1908,7785,
    636,2595,212,865,4167,8481,1389,2827,463,9135,8347,3045,10975,1015,11851,8531,
    12143,6940,8144,10506,6811,3502,10463,9360,7584,3120,2528,1040,4939,4443,9839,1481,
    7376,4590,6555,1530,2185,510,8921,170,7070,4153,6453,9577,2151,11385,717,3795,
    239,1265,4176,4518,1392,1506,464,502,4251,8360,1417,6883,8665,10487,11081,7592,
    7790,6627,6693,2209,2231,8929,4840,11169,9806,3723,7365,1241,2455,4510,9011,9696,
    7100,3232,6463,9270,10347,3090,3449,1030,5246,8536,5845,11038,10141,11872,11573,12150,
    7954,4050,10844,1350,7711,450,10763,150,7684,50,10754,4113,7681,1371,10753,457,
]
newhope_gammas_bitrev_montgomery = [
    4075,5315,7965,7373,522,10120,9027,5079,2344,1278,1973,5574,1018,6364,11248,8775,
    7500,7822,5537,4749,8500,12142,5456,7840,5445,3860,4536,11239,6171,8471,2683,11099,
    10561,400,6137,7341,5415,8646,6136,5862,5529,5206,56,9090,8724,11635,1702,10302,
    5339,6843,6093,3710,316,382,11821,8301,10930,5435,11035,973,8291,10256,8410,1922,
    12097,10968,10240,4912,4698,5057,7509,8844,8807,11502,5468,1010,9162,8120,2920,5241,
    6055,8953,677,5874,2766,10966,12237,9115,12138,10162,3957,2839,6383,2505,11858,1579,
    9026,3600,6077,4624,11868,4080,6068,3602,605,9987,504,8076,4782,6403,3029,6695,
    11184,142,5681,8812,2844,3438,8077,975,58,12048,1003,8757,885,6281,1956,5009,
    12225,3656,11606,9830,1566,5782,2503,2948,7032,3834,5919,4433,3054,6803,9166,1747,
    10211,11177,4322,1958,922,11848,4079,11231,4046,11580,1319,9139,6224,835,8049,8719,
    7105,1200,6122,9734,3956,1360,6119,5297,4298,3329,168,2692,1594,10327,5106,6328,
    3728,8240,5990,11130,948,1146,10885,325,8212,4016,8527,2919,295,6190,652,5766,
    11713,8326,6142,2447,1805,2882,10238,1954,1843,9928,4115,3030,2908,12071,8760,3434,
    5876,2281,2031,5333,8298,8320,12133,2767,11836,5908,11871,8517,6860,7515,10996,4737,
    2500,10800,5942,1583,11026,12240,5915,10806,1815,5383,1512,11939,2057,6920,9087,7796,
    8974,426,4754,1858,8532,10314,11942,2925,174,11566,3009,1693,2655,6554,5868,2738,
    11796,8193,9908,5444,10911,1912,7952,435,404,7644,11224,10146,7012,11121,11082,9041,
    9723,2187,9867,6250,3646,9852,6267,2987,8509,875,4976,10682,8005,5088,7278,11287,
    9223,27,3763,10849,11272,7404,5084,10657,8146,4714,12047,10752,2678,3704,545,7270,
    1067,5101,442,2401,390,11516,3778,8456,1045,9430,9808,5012,9377,6591,11935,4861,
    7852,3,3149,12129,12176,4919,10123,3915,3636,7351,2704,5291,1663,1777,1426,7635,
    1484,7394,2780,7094,8236,2645,7247,2305,2847,7875,7917,10115,10600,8925,4057,3271,
    9273,243,9289,11618,3136,5191,8889,9890,11869,5559,10111,10745,11813,8758,4905,3985,
    9603,9042,3978,9320,3510,5332,9424,2370,9405,11136,2249,8241,10659,10163,9103,6882,
    10810,1,5146,4043,8155,5736,11567,1305,1212,10643,9094,5860,8747,8785,8668,2545,
    4591,6561,5023,6461,10938,4978,6512,8961,949,2625,2639,7468,11726,2975,9545,9283,
    3091,81,11289,7969,9238,9923,2963,7393,12149,1853,11563,7678,8034,11112,1635,9521,
    3201,3014,1326,7203,1170,9970,11334,790,3135,3712,4846,2747,3553,7484,11227,2294,
    11267,9,9447,11809,11950,2468,5791,11745,10908,9764,8112,3584,4989,5331,4278,10616,
    4452,9893,8340,8993,130,7935,9452,6915,8541,11336,11462,5767,7222,2197,12171,9813,
    3241,729,3289,10276,9408,3284,2089,5092,11029,4388,5755,7657,10861,1696,2426,11955,
    4231,2548,11934,3382,10530,3707,3694,7110,3637,8830,6747,145,7399,5911,2731,8357,
]

newhope_omegas_inv_bitrev_montgomery = [
    4075,6974,4916,4324,7210,3262,2169,11767,3514,1041,5925,11271,6715,10316,11011,9945,
    1190,9606,3818,6118,1050,7753,8429,6844,4449,6833,147,3789,7540,6752,4467,4789,
    10367,3879,2033,3998,11316,1254,6854,1359,3988,468,11907,11973,8579,6196,5446,6950,
    1987,10587,654,3565,3199,12233,7083,6760,6427,6153,3643,6874,4948,6152,11889,1728,
    7280,10333,6008,11404,3532,11286,241,12231,11314,4212,8851,9445,3477,6608,12147,1105,
    5594,9260,5886,7507,4213,11785,2302,11684,8687,6221,8209,421,7665,6212,8689,3263,
    10710,431,9784,5906,9450,8332,2127,151,3174,52,1323,9523,6415,11612,3336,6234,
    7048,9369,4169,3127,11279,6821,787,3482,3445,4780,7232,7591,7377,2049,1321,192,
    9551,6421,5735,9634,10596,9280,723,12115,9364,347,1975,3757,10431,7535,11863,3315,
    4493,3202,5369,10232,350,10777,6906,10474,1483,6374,49,1263,10706,6347,1489,9789,
    7552,1293,4774,5429,3772,418,6381,453,9522,156,3969,3991,6956,10258,10008,6413,
    8855,3529,218,9381,9259,8174,2361,10446,10335,2051,9407,10484,9842,6147,3963,576,
    6523,11637,6099,11994,9370,3762,8273,4077,11964,1404,11143,11341,1159,6299,4049,8561,
    5961,7183,1962,10695,9597,12121,8960,7991,6992,6170,10929,8333,2555,6167,11089,5184,
    3570,4240,11454,6065,3150,10970,709,8243,1058,8210,441,11367,10331,7967,1112,2078,
    10542,3123,5486,9235,7856,6370,8455,5257,9341,9786,6507,10723,2459,683,8633,64,
]

def gen_omegas(table, inverse_omega=False, montgomery=False):
    res = []
    for i in range(0, n, 2):
        t = table[i]
        if inverse_omega:
            t = -t
        t = pow(g, 2*t, q)
        if montgomery:
            t *= mont
        t = t % q 
        res.append(t)
    res = map(int, res)
    res = list(res)
    return res 

def gen_gammas(table, inverse_gamma=False, montgomery=False):
    res = [] 
    for i in range(n):
        p = table[i]
        if inverse_gamma:
            p = -p
        t = pow(g, p, q)
        if inverse_gamma:
            # Multiply with inverse of n
            t *= n_inv
        if montgomery:
            t *= mont
        t = t % q 
        res.append(t)
    res = map(int, res)
    res = list(res)
    return res

def compare(a, b):
    assert len(a) == len(b)
    for i in range(len(a)):
        if a[i] != b[i]:
            print("{}: {} != {}".format(i, a[i], b[i]))
            return False
    return True

my_omegas = gen_omegas(ntr, inverse_omega=False, montgomery=False)
my_omegas_inv = gen_omegas(ntr, inverse_omega=True, montgomery=False)

my_omegas_montgomery = gen_omegas(ntr, inverse_omega=False, montgomery=True)
my_omegas_inv_montgomery = gen_omegas(ntr, inverse_omega=True, montgomery=True)

my_omegas_bitrev = gen_omegas(brv, inverse_omega=False, montgomery=False)
my_omegas_inv_bitrev = gen_omegas(brv, inverse_omega=True, montgomery=False)

my_omegas_bitrev_montgomery = gen_omegas(brv, inverse_omega=False, montgomery=True)
my_omegas_inv_bitrev_montgomery = gen_omegas(brv, inverse_omega=True, montgomery=True)

my_gammas_bitrev_montgomery = gen_gammas(brv, inverse_gamma=False, montgomery=True)
my_gammas_inv_montgomery = gen_gammas(ntr, inverse_gamma=True, montgomery=True)

my_gammas_bitrev  = gen_gammas(brv, inverse_gamma=False, montgomery=False)
my_gammas_inv = gen_gammas(ntr, inverse_gamma=True, montgomery=False)

def print_big_ram():
    print ("""#include "inttypes.h"
#include "newhope_ntt.h"
#include "newhope_params.h"
""")
    print("#if (NEWHOPE_N == 512)")
    print("uin16_t my_omegas[{}] = {};".format(n//2, my_omegas))
    print("uint16_t my_omegas_inv[{}] = {};".format(n//2, my_omegas_inv))
    print()
    print("uin16_t my_omegas_montgomery[{}] = {};".format(n//2, my_omegas_montgomery))
    print("uint16_t my_omegas_inv_montgomery[{}] = {};".format(n//2, my_omegas_inv_montgomery))
    print()
    print("uint16_t my_omegas_bitrev[{}] = {};".format(n//2, my_omegas_bitrev))
    print("uint16_t my_omegas_inv_bitrev[{}] = {};".format(n//2, my_omegas_inv_bitrev))
    print()
    print("uint16_t my_omegas_bitrev_montgomery[{}] = {};".format(n//2, my_omegas_bitrev_montgomery))
    print("uint16_t my_omegas_inv_bitrev_montgomery[{}] = {};".format(n//2, my_omegas_inv_bitrev_montgomery))
    print()
    print("uint16_t my_gammas_bitrev_montgomery[{}] = {};".format(n, my_gammas_bitrev_montgomery))
    print("uint16_t my_gammas_inv_montgomery[{}] = {};".format(n, my_gammas_inv_montgomery))
    print()
    print("uint16_t my_gammas_bitrev[{}] = {};".format(n, my_gammas_bitrev))
    print("uint16_t my_gammas_inv[{}] = {};".format(n, my_gammas_inv))
    print()

def print_ram1_ram2():
    pass


if __name__ == "__main__":
    assert newhope_omegas_inv_bitrev_montgomery == my_omegas_inv_bitrev_montgomery
    assert newhope_gammas_bitrev_montgomery == my_gammas_bitrev_montgomery
    assert newhope_gammas_inv_montgomery == my_gammas_inv_montgomery

    print_big_ram()


