verbose = 0

# From consts.cpp
zeta_barret = [
       0,    -1479,    -5146,     4043,    -1305,      722,     5736,    -4134, 
    3542,    -3504,    -2545,     3621,    -1646,     1212,     3195,     5860, 
   -4821,     2639,    -2625,     -949,     -563,    -2975,    -3006,    -2744, 
    5728,    -4591,     5023,     5828,    -3328,    -5777,    -4978,     1351, 
    2319,    -1170,     -955,     -790,    -3201,     3014,     5086,    -1326, 
    4846,    -2747,    -3135,     3712,     4805,    -3553,    -1062,    -2294, 
    3091,      -81,    -4320,    -1000,    -2963,    -4896,    -3051,     2366, 
   -1177,    -4255,    -1635,    -2768,     -140,    -1853,    -4611,     -726, 
    1260,     4388,     4632,    -5755,     2426,      334,     1428,     1696, 
    2013,    -3289,      729,     3241,     2881,     3284,    -5092,    -2089, 
   -3694,    -5179,    -1759,    -3707,     3382,     -355,    -2548,    -4231, 
    3637,     3459,      145,    -5542,    -2731,    -3932,    -4890,    -5911, 
   -2842,      480,     1022,        9,    -2468,      339,     5791,      544, 
   -1673,     4278,    -5331,    -4989,    -4177,    -3584,     1381,    -2525, 
    -953,    -3748,      827,     5767,     2476,      118,     2197,    -5067, 
    3949,    -3296,     4452,     2396,    -4354,      130,     2837,    -5374, 
    2401,      442,    -5101,    -1067,      390,      773,    -3833,     3778, 
     354,     4861,    -2912,     5698,     5012,    -2481,     2859,    -1045, 
    1017,    -4885,     1632,    -5084,       27,    -3066,    -3763,    -1440, 
    1537,      242,     4714,    -4143,    -2678,     3704,     5019,     -545, 
    1002,     5011,     5088,    -4284,    -4976,    -1607,    -3780,     -875, 
   -2437,     3646,     6022,     2987,    -2566,    -2187,    -6039,    -2422, 
   -1065,     2143,     -404,    -4645,     1168,     5277,    -1207,     3248, 
     493,    -4096,    -5444,     2381,    -4337,     -435,     1378,     1912, 
    2166,     3915,     -113,    -4919,     -160,     3149,       -3,     4437, 
    3636,     4938,     5291,     2704,    -1426,    -4654,     1663,    -1777, 
    3364,     1689,     4057,    -3271,    -2847,    -4414,     2174,     4372, 
   -5042,    -2305,     4053,     2645,     5195,    -2780,    -4895,     1484, 
   -3247,    -2686,    -3978,    -2969,    -2370,     2865,     5332,     3510, 
    1630,    -2126,     5407,     3186,    -1153,    -2884,    -2249,    -4048, 
   -2399,    -3400,    -5191,    -3136,    -3000,      671,     3016,      243, 
   -5559,      420,    -2178,     1544,     3985,     4905,     3531,      476, 
      49,     1263,     5915,     1483,    -2500,    -1489,    -1583,    -5942, 
    1512,      350,    -1815,     5383,     5369,    -2057,    -3202,     4493, 
   -2738,    -5868,    -5735,     2655,    -3009,     1693,      174,      723, 
   -1975,    -3757,      347,     2925,    -3315,     -426,     1858,     4754, 
    3030,     4115,     2361,    -1843,     2908,      218,     3434,    -3529, 
    3963,      576,     6142,    -2447,     1954,    -2051,    -2882,    -1805, 
    3991,    -3969,    -2767,      156,     2281,     5876,    -2031,     5333, 
    3772,      418,     5908,     -453,     5429,    -4774,    -4737,     1293, 
     295,     6099,     5766,      652,    -4016,     4077,    -3762,    -2919, 
     325,    -1404,    -1146,     -948,     5990,     1159,    -3728,    -4049, 
    3329,     4298,     -168,     2692,     5961,    -5106,    -1962,     1594, 
   -6122,    -2555,    -5184,    -1200,     1360,     3956,    -6119,     5297, 
   -4079,    -1058,      922,      441,     1958,     4322,     1112,     2078, 
    4046,      709,    -3150,     1319,     4240,    -3570,    -6065,     -835, 
    2459,      683,     3656,      -64,    -1566,     5782,    -2948,    -2503, 
   -3123,    -1747,    -3054,    -5486,    -4433,    -5919,     3834,    -5257, 
   -5241,    -2920,    -4169,    -3127,    -5468,     1010,    -3482,      787, 
    5057,     4698,     4780,    -3445,     -192,     1321,     4912,    -2049, 
     677,    -5874,    -6055,    -3336,     1323,    -2766,      -52,     3174, 
    1579,     -431,    -2505,     5906,     3957,    -2839,      151,    -2127, 
     -58,     -241,     3532,    -1003,     1956,    -5009,     -885,    -6008, 
    3477,    -5681,      142,    -1105,    -2844,     3438,     -975,     4212, 
   -3029,    -5594,     4782,     5886,    -4213,      504,     2302,     -605, 
    -421,    -4080,     3602,     6068,    -3600,     3263,     6077,    -4624, 
   -4467,    -4789,    -5537,     4749,     4449,    -5456,     -147,    -3789, 
    6118,    -3818,     1190,    -2683,     3860,     5445,    -4536,    -1050, 
    5079,    -3262,     2169,     -522,    -4324,     4916,    -4075,     5315, 
   -1278,    -2344,     1973,    -5574,    -3514,    -1041,     5925,    -1018, 
     654,     3565,     1702,     1987,    -5529,     5206,     3199,      -56, 
    6136,    -5862,    -5415,    -3643,     4948,    -6137,      400,    -1728, 
    5339,     5446,     3710,     6093,      468,    -3988,      316,     -382, 
   -2033,    -3998,     3879,     1922,    -1359,    -5435,      973,    -1254, 
]


def fwd_increase(l):
    r1 = 1 << l
    r2 = 1 << (l + 1)
    i1 = r1
    mask = r2 - 1
    ret = []
    for i in range(r2 - r1):
        i2 = i1
        i3 = i1 << 1
        i4 = i3 + 1
        if verbose:
            print(i1, i2, i3, i4)

        ret.append([i1, i3, i4])

        i1 = (i1 + 1) & mask

    return ret


def fwd_increase_last(last):
    r1 = 1 << last
    r2 = 1 << (last + 1)
    mask = r2 - 1
    ret = []
    i1 = r1
    for i in range((r2 - r1) // 2):
        i2 = i1 + 1
        i3 = i4 = 0

        if verbose:
            print(i1, i2, i3, i4)
        ret.append([i1, i2, 0])

        i1 = (i1 + 2) & mask

    return ret


def inv_decrease(l):
    r1 = 1 << l
    r2 = 1 << (l + 1)
    i1 = r2 - 1
    mask = r2 - 1
    ret = []
    for i in range((r2 - r1) // 2):
        i2 = i1 - 1
        i3 = i2 >> 1
        i4 = i3
        if verbose:
            print(i1, i2, i3, i4)

        ret.append([i1, i2, i4])

        i1 = (i1 - 2) & mask

    return ret

def inv_decrease_last(last):
    r1 = 1 << last
    r2 = 1 << (last + 1)
    i1 = r2 - 1
    mask = r2 - 1
    ret = [] 
    for i in range((r2 - r1)//2):
        i2 = i1 - 1
        i3 = i4 = 0

        if verbose:
            print(i1, i2, i3, i4)

        ret.append([i1, i2, 0])

        i1 = (i1 - 2) & mask


    return ret

def gen_table(array):
    ret = []
    for indices in array:
        i1, i2, i3 = indices
        v1, v2, v3 = zeta_barret[i1], zeta_barret[i2], zeta_barret[i3]
        ret.append([v1, v2, v3])
    return ret


def print_table_c(table, array):
    size = len(table)
    print(f"const data_t zetas_barrett_hw[{size}][3] = ", end="")
    print("{")
    for index, i in enumerate(table):
        print(
            "    {",
            "{:8}, {:8} , {:8}".format(i[0], i[1], i[2]),
            "},\t",
            f"// {array[index]}",
            end="\n",
        )
    print("};")


fwd = []
fwd += fwd_increase(0)
fwd += fwd_increase(2)
fwd += fwd_increase(4)
fwd += fwd_increase(6)
fwd += fwd_increase_last(8)

inv = []
inv += inv_decrease_last(8)
inv += inv_decrease(7)
inv += inv_decrease(5)
inv += inv_decrease(3)
inv += inv_decrease(1)


# print(fwd, len(fwd))
# print(inv, len(inv))
# We use Forward Array
table =  gen_table(fwd)

print_table_c(table, fwd)
